"
" Based on Vimrc of Ihor Kalnytskyi <ihor@kalnytskyi.com>.

scriptencoding utf-8

" VIMHOME should point to ~/.vim directory and is used as a general way
" to retrieve a path to Vim goodies.
let $VIMHOME=fnamemodify($MYVIMRC, ':h')

"
" // PLUGINS //
"

if !filereadable($VIMHOME . '/autoload/plug.vim')
  if executable('curl')
    silent! !curl -fLo $VIMHOME/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * silent! PlugInstall --sync | source $MYVIMRC
  endif
endif

silent! if plug#begin($VIMHOME . '/plugins')
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'wincent/terminus'
  Plug 'scrooloose/nerdtree'
  Plug 'majutsushi/tagbar'
  Plug 'mhinz/vim-grepper'
  Plug 'tpope/vim-fugitive'
  Plug 'mhinz/vim-signify'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'neomake/neomake'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'Valloric/ListToggle'
  Plug 'godlygeek/tabular'
  Plug 'mbbill/undotree'
  Plug 'AndrewRadev/linediff.vim'
  Plug 'kshenoy/vim-signature'
  Plug 'xsnippet/vim-xsnippet'
  Plug 'w0ng/vim-hybrid'
  Plug 'tpope/vim-sleuth'

  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  Plug 'yami-beta/asyncomplete-omni.vim'

  Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
  Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
  Plug 'mxw/vim-jsx', { 'for': 'javascript.jsx' }
  Plug 'iloginow/vim-stylus', { 'for': 'stylus' }
  Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
  Plug 'mitsuhiko/vim-jinja'
  Plug 'cespare/vim-toml'

  call plug#end()

  " ~ prabirshrestha/vim-lsp

  augroup LSP
    autocmd!

    if executable('pyls')
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ 'priority': 1,
      \ })
    endif

    if executable('clangd')
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ 'priority': 1,
      \ })
    endif

    if executable('rls')
      autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rls']},
        \ 'whitelist': ['rust'],
        \ 'priority': 1,
      \ })
    endif
  augroup END

  " ~ prabirshrestha/asyncomplete.vim

  let g:asyncomplete_remove_duplicates = 1

  augroup ASYNCOMPLETE
    autocmd!
    autocmd User asyncomplete_setup call asyncomplete#register_source(
      \ asyncomplete#sources#omni#get_source_options({
          \ 'name': 'omni',
          \ 'whitelist': ['*'],
          \ 'blacklist': ['c', 'cpp', 'html'],
          \ 'completor': function('asyncomplete#sources#omni#completor')
      \ }))
  augroup END

  " ~ ctrlpvim/ctrlp.vim

  let g:ctrlp_user_command = {
    \ 'types': {
      \ 1: ['.git', 'git --git-dir=%s/.git ls-files -oc --exclude-standard'],
      \ 2: ['.hg', 'hg --cwd %s status -numac -I . $(hg root)'],
    \ },
  \ }

  " ~ scrooloose/nerdtree

  let g:NERDTreeQuitOnOpen = 1

  " ~ majutsushi/tagbar

  let g:tagbar_width = 30
  let g:tagbar_autoclose = 1
  let g:tagbar_autofocus = 1
  let g:tagbar_iconchars = ['▸', '▾']
  let g:tagbar_show_visibility = 0
  let g:tagbar_type_rst = {
    \ 'ctagstype': 'restructuredtext',
    \ 'kinds': [
      \ 'c:chapters',
      \ 's:sections',
      \ 'S:subsections',
      \ 't:subsubsections',
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope': {
      \ 'c': 'chapter',
      \ 's': 'section',
      \ 'S': 'subsection',
      \ 't': 'subsubsection',
    \ },
    \ 'sort': 0,
  \ }
  let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds': [
      \ 'n:modules',
      \ 's:structs',
      \ 'i:traits',
      \ 'c:implementations',
      \ 'f:functions',
      \ 'g:enums',
      \ 't:types',
      \ 'v:variables',
      \ 'M:macros',
      \ 'm:struct members',
      \ 'e:enumerators',
      \ 'F:methods',
    \ ],
    \ 'sro': '.',
    \ 'kind2scope': {
      \ 'n': 'module',
      \ 's': 'struct',
      \ 'g': 'enum',
      \ 'i': 'interface',
      \ 'c': 'implementation',
    \ },
  \ }
  let g:tagbar_type_css = {
    \ 'ctagstype': 'css',
    \ 'kinds': [
      \ 'c:classes',
      \ 's:selectors',
      \ 'i:identities',
    \ ],
    \ 'sort': 0,
  \ }

  " ~ mhinz/vim-grepper

  let g:grepper = {
    \ 'dir': 'repo,file',
    \ 'tools': ['git', 'rg', 'ag', 'grep'],
  \ }

  " ~ neomake/neomake

  let g:airline#extensions#neomake#enabled = 1

  " ~ Valloric/ListToggle

  let g:lt_location_list_toggle_map = '<leader>l'
  let g:lt_quickfix_list_toggle_map = '<leader>q'

  " ~ w0ng/vim-hybrid

  if $COLORTERM == 'truecolor' || $COLORTERM == '24bit'
    set termguicolors
  endif

  let g:hybrid_reduced_contrast = 1

  set background=dark
  silent! colorscheme hybrid

  " ~ pangloss/vim-javascript

  let g:javascript_plugin_jsdoc = 1
  let g:javascript_plugin_flow = 1

  " ~ plasticboy/vim-markdown

  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_conceal = 0

endif

"
" // GENERAL //
"

set encoding=utf-8                  " do not rely on locale on this default
set visualbell                      " flash screen instead of beep
set showcmd                         " show typing command in bottom right corner
set laststatus=2                    " always show a status line
set hidden                          " do not abandon buffers, hid them instead
set scrolloff=3                     " start scrolling 3 lines ahead
set sidescroll=1                    " scroll horizontally by 1 column
set sidescrolloff=3                 " start scrolling 3 columns ahead
set autoread                        " reread file when modified outside vim
set backspace=indent,eol,start      " smart backspace
set number                          " show line numbers
set history=1000                    " amount of commands to remember
set showbreak=↪                     " character to mark wrapped line
set lazyredraw                      " do not redraw screen on macros execution, etc
set title                           " propagate useful info to window title
set colorcolumn=80,100              " show columns at 80 & 100 characters
set nrformats-=octal                " use decimal as default
set autochdir                       " change cwd to current file
set virtualedit=all                 " free cursor position in all Vim modes
set wildmenu                        " enhanced command line completion
set notimeout                       " no timeout on keybindings (aka mappings)
set ttimeout                        " do timeout on key codes
set ttimeoutlen=100                 " timeout in ms
set spelllang=en,ru                 " languages to spellcheck
set nowrap                          " do not wrap lines visually
set nofoldenable                    " no code folding, I hate it
set noshowmode                      " do not show Vim mode, airline shows it
set clipboard=unnamed,unnamedplus   " use system clipboard on macOS and Linux
set complete-=i                     " do not scan included files
set completeopt=longest,menuone     " use popup even if there's only one match
set formatoptions+=r                " auto insert comment leader on <enter>
set mouse=a                         " enable mouse support in all Vim modes
set mousehide                       " hide mouse cursor when typing
set cursorline                      " highlight the line with cursor
set cursorcolumn                    " highlight the column with cursor
set synmaxcol=1000                  " syntax coloring long lines slows down Vim
set list                            " show unprintable characters
set listchars=tab:»·,trail:·        " set unprintable characters
set incsearch                       " search result as you typing
set ignorecase                      " case insensitive search
set smartcase                       " match uppercase in the search string
set hlsearch                        " highlight search results
set autoindent                      " inherit current indentation on new line
set expandtab                       " insert space instead the tab
set softtabstop=4                   " insert spaces instead of tabs
set shiftwidth=4                    " shift lines by 4 spaces
set tabstop=8                       " set tab width
set smarttab                        " align tab instead of just inserting 4 spaces
set undofile                        " persistent undo (survives Vim restart)
set backup                          " backups on write.. not sure why I need them
set noswapfile                      " do not create swap files
set undodir=$VIMHOME/tmp            " directory to store undo files
set backupdir=$VIMHOME/tmp          " directory to store backup files
set directory=$VIMHOME/tmp          " directory to store swap files

" ensure these directories exist because otherwise Vim throws errors
for path in [&undodir, &backupdir, &directory]
  if !isdirectory(expand(path))
    call mkdir(expand(path), "p")
  endif
endfor

"
" // KEYBINDINGS //
"

nnoremap <leader>1 :NERDTreeToggle<CR>
nnoremap <leader>2 :TagbarToggle<CR>
nnoremap <leader>3 :set spell!<CR>
nnoremap <leader>4 :UndotreeToggle<CR>
nnoremap <leader>5 :SignatureListBufferMarks<CR>
nnoremap <leader>g :Grepper<CR>
nnoremap <leader>d :LspDefinition<CR>
nnoremap <leader>h :LspHover<CR>
nnoremap <leader>r :LspReferences<CR>

cmap w!! w !sudo tee % >/dev/null

"
" // LANGUAGES //
"

autocmd BufReadPost *.qss set filetype=css
autocmd BufReadPost *.qrc set filetype=xml

autocmd BufReadPre SConstruct set filetype=python
autocmd BufReadPre SConscript set filetype=python

autocmd BufReadPost .babelrc set filetype=json
autocmd BufReadPost .eslintrc set filetype=json

augroup PYTHON
  autocmd!
  autocmd FileType python setlocal comments+=b:#:   " sphinx (#:) comments
augroup END

augroup HTML
  autocmd!
  autocmd FileType html setlocal shiftwidth=2 tabstop=2
  autocmd FileType htmljinja setlocal shiftwidth=2 tabstop=2
augroup END

augroup CSS
  autocmd!
  autocmd FileType css setlocal shiftwidth=2 tabstop=2
augroup END

augroup JAVASCRIPT
  autocmd!
  autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
  autocmd FileType javascript.jsx setlocal shiftwidth=2 tabstop=2
augroup END

augroup YAML
  autocmd!
  autocmd FileType yaml setlocal shiftwidth=2 tabstop=2
augroup END

augroup VIM
  autocmd!
  autocmd FileType vim setlocal shiftwidth=2 tabstop=2
augroup END

augroup SHELL
  autocmd!
  autocmd FileType sh setlocal shiftwidth=2 tabstop=2
augroup END

augroup LSP-HOVER-ON-RIGHT
  autocmd!
  autocmd FileType *.lsp-hover wincmd L
augroup END
